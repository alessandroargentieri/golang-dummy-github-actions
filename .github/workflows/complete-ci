name: Complete CI

on:
  push:
    tags:
      - 'v*'
      - 'v[0-9]+\.[0-9]+\.[0-9]+'

jobs:


  go-build-test:
    runs-on: ubuntu-latest
    steps:
    
    - id: checkout_code
      name: Checkout to source code
      uses: actions/checkout@v2

    - id: go_setting
      name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16

    - id: go_build
      name: Go Build
      run: go build .

    - id: go_test
      name: Go Test
      run: go test -v ./...
  
  
  docker-build-push:
    runs-on: ubuntu-latest
    needs: go-build-test
    outputs:
        release_version: ${{ steps.docker_build_push.outputs.release_version }}
    steps:

    - id: checkout_code
      name: Checkout code
      uses: actions/checkout@v2

    - id: login_docker_hub
      name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
    
    - id: docker_build_push
      name: Build and push the Docker image
      run: |
        # examples of tag: v1, v1.4, v1.4.5
        TAG=$(echo $GITHUB_REF | cut -d / -f 3)
        VERSION=$(echo $TAG | cut -d 'v' -f 2)
        
        # this is how I would export the environment variable for the next steps of the same job
        # echo "RELEASE_VERSION=${VERSION}" >> $GITHUB_ENV
        # I would recall it by using RECOVERED_VAR=${{ env.RELEASE_VERSION }} 
        
        # this is INSTEAD how to export the environment variable for the dependant jobs
        echo "::set-output name=release_version::$VERSION"
        
        IS_NUM_REGEX="^[0-9]+$"

        SPLITTED=(${VERSION//./ })
        # for each number of the version, remove eventual SNAPSHOT, alpha, beta suffix and set to 0 if null
        for i in {0..2}
        do
           SPLITTED[$i]=`echo ${SPLITTED[$i]} | cut -d '-' -f 1`
           [ "${SPLITTED[$i]}" != "" ] || SPLITTED[$i]=0
           [[ ${SPLITTED[$i]} =~ $IS_NUM_REGEX ]] || exit 1
        done
        
        MAJOR_TAG=${SPLITTED[0]}
        MINOR_TAG=$MAJOR_TAG.${SPLITTED[1]}
        PATCH_TAG=$MINOR_TAG.${SPLITTED[2]}

        IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/golang-dummy

        # examples of docker tag generation:
        # | git tag | generated docker tags |
        # |---------|-----------------------|
        # | v1      | 1, 1.0, 1.0.0, latest |
        # | v1.2    | 1, 1.2, 1.2.0, latest |
        # | v1.2.3  | 1, 1.2, 1.2.3, latest |
        
        docker build . --file ./Dockerfile --tag $IMAGE_NAME:$MAJOR_TAG --tag $IMAGE_NAME:$MINOR_TAG --tag $IMAGE_NAME:$PATCH_TAG --tag $IMAGE_NAME:latest

        # push all generated tags
        docker push -a $IMAGE_NAME


  github-release:
    name: Create Github Release
    needs: docker-build-push
    runs-on: ubuntu-latest
    steps:
    
      - id: checkout_code 
        name: Checkout code
        uses: actions/checkout@v2
        
      - id: github_release
        name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ needs.docker-build-push.outputs.release_version }}
          body: |
              hello
              ciao
          draft: false
          prerelease: false
